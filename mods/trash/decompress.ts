const data =
  "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";

function base64ToArrayBuffer(base64) {
  const binaryString = atob(base64);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
}

function decompress(input: Uint8Array): Promise<ArrayBuffer> {
  const ds = new DecompressionStream("deflate");
  const writer = ds.writable.getWriter();
  writer.write(input);
  writer.close();
  const arrayBufferPromise = new Response(ds.readable).arrayBuffer();
  return arrayBufferPromise;
}

(async () => {
  const buffer = base64ToArrayBuffer(data);
  console.time("test");
  const debuffer = await decompress(buffer);
  console.timeEnd("test");

  console.log(buffer);
  console.log(debuffer);
})();
